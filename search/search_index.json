{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MyNotes Hi \ud83d\udc4b, My name is Bajal. I'm an engineer currently working at The New York Times. In this website, I plan to write up stuff that helps me at my daily work.","title":"Home"},{"location":"#welcome-to-mynotes","text":"Hi \ud83d\udc4b, My name is Bajal. I'm an engineer currently working at The New York Times. In this website, I plan to write up stuff that helps me at my daily work.","title":"Welcome to MyNotes"},{"location":"git_tips/","text":"Git is an awesome piece of software used to track changes in any set of files, between multiple collaborators. Some good reads Start here, if you are new Git Cheat sheet The .gitconfig file The .gitconfig file saves all the local user preferences. You can use use git config --global -e to bring up if you are not sure where it is placed. (Typically it is in ~/.gitconfig ) Below is a sample configuration. I like to define aliases here. Turning on autocorrect is also a good idea. [color] ui = auto [filter \"lfs\"] smudge = git-lfs smudge %f required = true clean = git-lfs clean %f [core] excludesfile = ~/.gitignore_global [help] autocorrect = 1 [alias] ci = commit st = status co = checkout oneline = log --pretty=oneline br = branch la = log --pretty=\"format:%ad %h (%an): %s\" --date=short [user] name = Bajal, M email = xxx@xxx.com","title":"Git Tips"},{"location":"git_tips/#some-good-reads","text":"Start here, if you are new Git Cheat sheet","title":"Some good reads"},{"location":"git_tips/#the-gitconfig-file","text":"The .gitconfig file saves all the local user preferences. You can use use git config --global -e to bring up if you are not sure where it is placed. (Typically it is in ~/.gitconfig ) Below is a sample configuration. I like to define aliases here. Turning on autocorrect is also a good idea. [color] ui = auto [filter \"lfs\"] smudge = git-lfs smudge %f required = true clean = git-lfs clean %f [core] excludesfile = ~/.gitignore_global [help] autocorrect = 1 [alias] ci = commit st = status co = checkout oneline = log --pretty=oneline br = branch la = log --pretty=\"format:%ad %h (%an): %s\" --date=short [user] name = Bajal, M email = xxx@xxx.com","title":"The .gitconfig file"},{"location":"golang/","text":"Go was conceived in September 2007 by Robert Griesemer, Rob Pike, and Ken Thompson, all at Google, and was announced in November 2009. The goals of the language and its accompanying tools were to be expressive, efficient in both compilation and execution, and effective in writing reliable and robust programs. clear, idiomatic, and efficient programs. open-source, cross platform From C, Go inherited its expression syntax, control-flow statements, basic data types, call-by-value param- eter passing, pointers, and above all, C\u2019s emphasis on programs that compile to efficient machine code and cooperate naturally with the abstractions of current operating systems. Simplicity Big standard library (Batteries included) Go differs from Java in several ways: Programs compile to machine code. There's no VM. Statically linked binaries Control over memory layout Function values and lexical closures Built-in strings (UTF-8) Built-in generic maps and arrays/slices Built-in concurrency Go intentionally leaves out many features such as: No classes No constructors No inheritance No final No exceptions No annotations No user-defined generics","title":"Golang"},{"location":"leetcode_list/","text":"Problem Leetcode Link Number of Islands (145 times) Link Partition Labels (144 times) Link Two Sum (100 times) Link Reorder Data in Log Files (89 times) Link LRU Cache (81 times) Link Minimum Difficulty of a Job Schedule (71 times) Link Critical Connections in a Network (70 times) Link Pairs of Songs With Total Durations Divisible by 60 (58 times) Link K Closest Points to Origin (57 times) Link Merge Two Sorted Lists (56 times) Link Top K Frequent Words (55 times) Link Copy List with Random Pointer (54 times) Link Most Common Word (49 times) Link Merge k Sorted Lists (44 times) Link Longest Palindromic Substring (43 times) Link Subtree of Another Tree (41 times) Link Trapping Rain Water (40 times) Link Word Ladder (36 times) Link Maximal Square (35 times) Link Friend Circles (34 times) Link Longest Substring Without Repeating Characters (34 times) Link Add Two Numbers (33 times) Link Merge Intervals (32 times) Link Analyze User Website Visit Pattern (31 times) Link Prison Cells After N Days (31 times) Link Meeting Rooms II (30 times) Link Group Anagrams (29 times) Link Sliding Window Maximum (28 times) Link Median of Two Sorted Arrays (28 times) Link Best Time to Buy and Sell Stock (28 times) Link Product of Array Except Self (27 times) Link Course Schedule II (27 times) Link Letter Combinations of a Phone Number (27 times) Link 3Sum (26 times) Link Find Median from Data Stream (26 times) Link Rotting Oranges (26 times) Link Search a 2D Matrix II (25 times) Link Word Search II (24 times) Link Binary Tree Zigzag Level Order Traversal (24 times) Link Insert Delete GetRandom O(1) ) (23 times) Link All Nodes Distance K in Binary Tree (22 times) Link Baseball Game (22 times) Link Word Break II (22 times) Link","title":"LeetCode List"},{"location":"places_visited/","text":"To come","title":"Places Visited"},{"location":"sftpgo/","text":"To test code related to SFTP servers locally, it is useful to spin up a local container that acts as SFTP server. atmoz/sftp and sftpgo are two such popular containerized solution options. What follows below is a quick set of instructions to get you started using the sftpgo library. More detailed instructions can be found here . Generate a public/private key pair ssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key < /dev/null Launch an sftpgo container. Notice we are binding a local path on the host to the sftp server to simulate a file system. docker run --name some-sftpgo -p 127.0.0.1:8080:8080 -p 2022:2022 --mount type=bind,source=/Users/bajal/share,target=/outbox -d \"drakkan/sftpgo:latest\" Go to localhost:8080 and setup a user. Copy the public key generated in step 1 here. Password could be left blank. Now you can connect to the server using the private key created in step 1 as: sftp -v -P 2022 -i ssh_host_rsa_key foo@localhost","title":"Local SFTP server"}]}